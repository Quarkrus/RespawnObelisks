plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url = "https://maven.uuid.gg/releases" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.resourcefulbees.com/repository/maven-public/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = "https://maven.siphalor.de/" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = 'https://maven.ladysnake.org/releases' }
    maven { url = "https://cursemaven.com" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modApi(include("com.redpxnda.nucleus:nucleus-core-fabric:${rootProject.minecraft_version}+${rootProject.nucleus_core_version}"))
    modApi(include("com.redpxnda.nucleus:nucleus-codec-fabric:${rootProject.minecraft_version}+${rootProject.nucleus_codec_version}"))
    modApi(include("com.redpxnda.nucleus:nucleus-config-fabric:${rootProject.minecraft_version}+${rootProject.nucleus_config_version}"))
    modApi(include("com.redpxnda.nucleus:nucleus-facet-fabric:${rootProject.minecraft_version}+${rootProject.nucleus_facet_version}"))

    modImplementation("maven.modrinth:moonlight:1.20-2.8.27")
    modImplementation("maven.modrinth:spelunkery:1.20.1-0.3.4")

//    modImplementation("curse.maven:cloth-config-348521:4973440")
//    modImplementation("curse.maven:youre-in-grave-danger-544912:5209191")

    modImplementation("maven.modrinth:spark:1.10.53-fabric")

    if ("${rootProject.use_trinkets}" == "true") {
        modApi("dev.emi:trinkets:${rootProject.trinkets_version}")
        modImplementation "curse.maven:icarus-428151:4586587"
        modImplementation "curse.maven:midnightlib-488090:4576371"
    } else
        modCompileOnlyApi("dev.emi:trinkets:${rootProject.trinkets_version}")

    if ("${rootProject.use_carryon}" == "true")
        modApi("tschipp.carryon:carryon-fabric-${rootProject.minecraft_version}:${rootProject.carryon_version}")
    else
        modCompileOnlyApi("tschipp.carryon:carryon-fabric-${rootProject.minecraft_version}:${rootProject.carryon_version}")

    if ("${rootProject.use_jei}" == "true") {
        modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}") {
            transitive = false
        }
    } else {
        modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}") {
            transitive = false
        }
    }

    if ("${rootProject.use_rei}" == "true")
        modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}")
    modCompileOnlyApi("me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}")
    modCompileOnlyApi("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rootProject.rei_version}")

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
